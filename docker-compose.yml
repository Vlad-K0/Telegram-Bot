services:
  bot:
    build:
      context: . # Указываем контекст сборки
      dockerfile: Dockerfile # Явно указываем Dockerfile для бота
    container_name: telegram_outline_bot
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - bot_network
    # Если webhook_listener будет в том же контейнере, эта секция не нужна.
    # Если в отдельном, то эта секция для бота остается.

  db:
    image: postgres:15
    container_name: postgres_db_for_bot
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Для доступа к БД с хоста (DBeaver)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot_network

  webhook_server: # Новый сервис для Flask-приложения
    build:
      context: . # Используем тот же контекст сборки
      dockerfile: Dockerfile.webhook # НУЖНО СОЗДАТЬ ЭТОТ Dockerfile
    container_name: yookassa_webhook_listener
    restart: unless-stopped
    env_file:
      - .env # Передаем те же переменные окружения
    ports:
      - "5001:5001" # Маппим порт Flask-сервера на хост (для ngrok)
    depends_on: # Зависит от БД, так как будет в нее писать
      db:
        condition: service_healthy
    networks:
      - bot_network

volumes:
  pg_data:

networks:
  bot_network:
    driver: bridge
