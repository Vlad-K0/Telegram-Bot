import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
# REMOVE: from outline_vpn.outline_vpn import OutlineVPN
from dotenv import load_dotenv
from sqlalchemy.future import select
from sqlalchemy import and_ # and_ –º–æ–∂–µ—Ç –µ—â–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
from datetime import datetime, timedelta
import asyncio
import uuid
from decimal import Decimal
import json
# REMOVE: import httpx # marzpy –∏—Å–ø–æ–ª—å–∑—É–µ—Ç aiohttp

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from database import User as DbUser, VpnKey, Payment, create_db_tables, get_async_session # Renamed User to DbUser to avoid conflict
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from yookassa import Configuration as YooKassaConfiguration
from yookassa import Payment as YooKassaPaymentObject
from yookassa.domain.request.payment_request_builder import PaymentRequestBuilder
from yookassa.domain.models.receipt import Receipt, ReceiptItem

# +++ Marzban Imports +++
from marzpy import Marzban
from marzpy.api.user import User as MarzbanUser # Alias –¥–ª—è –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# REMOVE: API_URL = os.getenv("API_URL")
# REMOVE: CERT_SHA256 = os.getenv("CERT_SHA256")
# REMOVE: AMNEZIA_API_URL = os.getenv("AMNEZIA_API_URL")

# +++ Marzban Settings +++
MARZBAN_PANEL_URL = os.getenv("MARZBAN_PANEL_URL")
MARZBAN_USERNAME = os.getenv("MARZBAN_USERNAME")
MARZBAN_PASSWORD = os.getenv("MARZBAN_PASSWORD")
MARZBAN_DEFAULT_DATA_LIMIT_GB_TRIAL = int(os.getenv("MARZBAN_DEFAULT_DATA_LIMIT_GB_TRIAL", "5")) # –ì–ë –¥–ª—è —Ç—Ä–∏–∞–ª–∞
MARZBAN_DEFAULT_DATA_LIMIT_GB_PAID = int(os.getenv("MARZBAN_DEFAULT_DATA_LIMIT_GB_PAID", "50")) # –ì–ë –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü


YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
BASE_PRICE_PER_MONTH = Decimal(os.getenv("BASE_PRICE_PER_MONTH", "160.00"))
FREE_TRIAL_DAYS = int(os.getenv("FREE_TRIAL_DAYS", "30")) # –û—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –¥–ª—è Marzban

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
# REMOVE: outline_client = None
# REMOVE: if API_URL and CERT_SHA256:
# REMOVE:     try:
# REMOVE:         outline_client = OutlineVPN(api_url=API_URL, cert_sha256=CERT_SHA256)
# REMOVE:         logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Outline VPN API.")
# REMOVE:     except Exception as e:
# REMOVE:         logger.error(f"–û—à–∏–±–∫–∞ Outline API: {e}")

# REMOVE: if AMNEZIA_API_URL:
# REMOVE:     logger.info("Amnezia API URL –∑–∞–≥—Ä—É–∂–µ–Ω.")
# REMOVE: else:
# REMOVE:     logger.info("Amnezia API URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.")

# +++ Marzban Client +++
marzban_client: Marzban | None = None
marzban_api_token: str | None = None # –¢–æ–∫–µ–Ω –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

async def initialize_marzban_client():
    global marzban_client
    if MARZBAN_PANEL_URL and MARZBAN_USERNAME and MARZBAN_PASSWORD:
        try:
            marzban_client = Marzban(username=MARZBAN_USERNAME, password=MARZBAN_PASSWORD, base_url=MARZBAN_PANEL_URL)
            logger.info("–ö–ª–∏–µ–Ω—Ç Marzban –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. URL: %s", MARZBAN_PANEL_URL)
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–æ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ API
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Marzban: {e}")
            marzban_client = None
    else:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã MARZBAN_PANEL_URL, MARZBAN_USERNAME –∏–ª–∏ MARZBAN_PASSWORD –≤ .env. –ö–ª–∏–µ–Ω—Ç Marzban –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Marzban
async def get_marzban_api_token(force_refresh: bool = False) -> str | None:
    global marzban_api_token
    if not marzban_client:
        logger.error("–ö–ª–∏–µ–Ω—Ç Marzban –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return None

    if marzban_api_token and not force_refresh:
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —Å marzpy
        # –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å –∏ –Ω–µ –ø—Ä–æ—Å—è—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ.
        return marzban_api_token

    try:
        token = await marzban_client.get_token()
        if token:
            marzban_api_token = token
            logger.info("–¢–æ–∫–µ–Ω Marzban —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            return marzban_api_token
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Marzban (–æ—Ç–≤–µ—Ç None).")
            marzban_api_token = None
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ Marzban: {e}", exc_info=True)
        marzban_api_token = None
        return None


if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    YooKassaConfiguration.account_id = YOOKASSA_SHOP_ID
    YooKassaConfiguration.secret_key = YOOKASSA_SECRET_KEY
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
BUTTON_GET_KEY = "üîë –ü–æ–ª—É—á–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø" # –¢–µ–∫—Å—Ç –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ "üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ / –î–æ—Å—Ç—É–ø"
BUTTON_MY_KEYS = "‚ÑπÔ∏è –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞" # –û—Å—Ç–∞–≤–ª—è–µ–º

# REMOVE: PROTOCOL_CALLBACK_OUTLINE = "proto_outline"
# REMOVE: PROTOCOL_CALLBACK_AMNEZIA = "proto_amnezia"

# REMOVE: protocol_keyboard = InlineKeyboardMarkup([
# REMOVE:     [InlineKeyboardButton("Outline VPN", callback_data=PROTOCOL_CALLBACK_OUTLINE)],
# REMOVE:     [InlineKeyboardButton("Amnezia VPN (WireGuard)", callback_data=PROTOCOL_CALLBACK_AMNEZIA)],
# REMOVE: ])

# REMOVE AMNEZIA API CLIENT FUNCTIONS (create_amnezia_user, get_amnezia_config)

main_menu_keyboard = [
    [KeyboardButton(BUTTON_GET_KEY)],
    [KeyboardButton(BUTTON_MY_KEYS)],
]
REPLY_MARKUP_MAIN_MENU = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_tg = update.effective_user
    logger.info(f"User {user_tg.first_name} ({user_tg.id}) started.")
    async for session in get_async_session():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DbUser –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ User
        stmt = select(User).where(User.telegram_id == user_tg.id)
        db_user_obj = (await session.execute(stmt)).scalar_one_or_none() # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø—É—Ç–∞–Ω–∏—Ü—ã
        if not db_user_obj:
            db_user_obj = DbUser(telegram_id=user_tg.id, username=user_tg.username, first_name=user_tg.first_name)
            session.add(db_user_obj)
            await session.commit()
            await session.refresh(db_user_obj) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è default –∑–Ω–∞—á–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    
    await update.message.reply_html(f"–ü—Ä–∏–≤–µ—Ç, {user_tg.mention_html()}! üëã\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±—ã—Å—Ç—Ä–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É VPN.", reply_markup=REPLY_MARKUP_MAIN_MENU)

async def get_key_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ/–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞.
    –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ª–æ–≥–∏–∫–µ –≤—ã–¥–∞—á–∏ –∫–ª—é—á–∞ –∏–ª–∏ –æ–ø–ª–∞—Ç—ã.
    """
    # query = update.callback_query # –≠—Ç–æ –±—ã–ª–æ –±—ã –µ—Å–ª–∏ —ç—Ç–æ CallbackQueryHandler
    # await query.answer() # –ù–µ –Ω—É–∂–Ω–æ –¥–ª—è MessageHandler
    # await query.edit_message_text(text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...") # –ù–µ –Ω—É–∂–Ω–æ –¥–ª—è MessageHandler
    
    # –î–ª—è MessageHandler:
    await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø...")
    await initiate_key_or_payment_flow(update, context) # –ü–µ—Ä–µ–¥–∞–µ–º update –∏ context –¥–∞–ª—å—à–µ

# REMOVE: async def handle_protocol_selection(...)

async def initiate_key_or_payment_flow(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –†–µ—à–∞–µ—Ç, –≤—ã–¥–∞—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø Marzban –∏–ª–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É.
    """
    user_tg = update.effective_user
    chat_id = update.effective_chat.id

    if not marzban_client:
        await context.bot.send_message(chat_id, "VPN —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. (–ö–ª–∏–µ–Ω—Ç Marzban –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)")
        return

    async for session in get_async_session():
        db_user_obj = (await session.execute(select(DbUser).where(DbUser.telegram_id == user_tg.id))).scalar_one()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á/–ø–æ–¥–ø–∏—Å–∫—É
        stmt_trial_key = select(VpnKey).where(
            VpnKey.user_id == db_user_obj.id,
            VpnKey.is_trial == True,
        )
        trial_key_exists = (await session.execute(stmt_trial_key)).scalars().first()

        if trial_key_exists:
            logger.info(f"User {user_tg.id} ({db_user_obj.username}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ.")
            await context.bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å.")
            # –ü–µ—Ä–µ–¥–∞–µ–º None –¥–ª—è marzban_username_to_extend, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–∞—Ç–Ω–æ–π
            await initiate_yookassa_payment(update, context, months=1, duration_days=30)
        else:
            logger.info(f"User {user_tg.id} ({db_user_obj.username}) –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø Marzban.")

            marzban_api_token_val = await get_marzban_api_token()
            if not marzban_api_token_val:
                await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å VPN —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. (–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ Marzban)")
                return

            try:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Marzban
                # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å telegram_id –∏–ª–∏ uuid, –µ—Å–ª–∏ marzban_username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º global, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_id, —Ç.–∫. –æ–Ω —É–Ω–∏–∫–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
                marzban_trial_username = f"trial_tg_{user_tg.id}_{uuid.uuid4().hex[:6]}"

                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç—Ä–∏–∞–ª–∞
                trial_expires_dt = datetime.utcnow() + timedelta(days=FREE_TRIAL_DAYS)
                trial_expire_timestamp = int(trial_expires_dt.timestamp())

                # –û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö)
                trial_data_limit_bytes = MARZBAN_DEFAULT_DATA_LIMIT_GB_TRIAL * (1024**3)

                new_marzban_user_config = MarzbanUser(
                    username=marzban_trial_username,
                    proxies={}, # –û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ Marzban User Template
                    inbounds={}, # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                    expire=trial_expire_timestamp,
                    data_limit=trial_data_limit_bytes,
                    data_limit_reset_strategy="no_reset", # –∏–ª–∏ –¥—Ä—É–≥–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
                    status="active"
                    # online_at, on_hold_expire_duration, on_hold_data_limit - –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                )

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread, –µ—Å–ª–∏ marzpy –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
                # –°—É–¥—è –ø–æ README marzpy, –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç aiohttp, —Ç–∞–∫ —á—Ç–æ –µ–≥–æ –º–µ—Ç–æ–¥—ã —É–∂–µ async.
                # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ marzpy, to_thread –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ.
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ marzpy.add_user() –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–µ–Ω.
                created_marzban_user = await marzban_client.add_user(user=new_marzban_user_config, token=marzban_api_token_val)

                if not created_marzban_user or not created_marzban_user.subscription_url:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç subscription_url –¥–ª—è {marzban_trial_username}.")
                    await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ VPN —Å–µ—Ä–≤–∏—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return

                new_db_vpn_key = VpnKey(
                    marzban_username=marzban_trial_username,
                    subscription_url=created_marzban_user.subscription_url,
                    name=f"–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Marzban –¥–ª—è {db_user_obj.username or user_tg.id}",
                    user_id=db_user_obj.id,
                    expires_at=trial_expires_dt,
                    is_active=True,
                    is_trial=True
                )
                session.add(new_db_vpn_key)
                await session.commit()
                await session.refresh(new_db_vpn_key)

                expires_str = trial_expires_dt.strftime('%d.%m.%Y –≤ %H:%M')
                msg_text = (
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN.\n\n"
                    f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø–æ–¥–ø–∏—Å–∫–∞:\n`{created_marzban_user.subscription_url}`\n\n"
                    f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, V2Ray, Clash, Shadowrocket –∏ –¥—Ä.).\n"
                    f"üóìÔ∏è –î–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: *{expires_str} UTC*\n"
                    f"üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: *{MARZBAN_DEFAULT_DATA_LIMIT_GB_TRIAL} –ì–ë*"
                )
                await context.bot.send_message(chat_id, msg_text, parse_mode='Markdown')

            except Exception as e:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å retry –ª–æ–≥–∏–∫—É –∏–ª–∏ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ Marzban
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º marzban_username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å uuid)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban –¥–ª—è user_tg_id {user_tg.id}: {e}", exc_info=True)
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
                if "token" in str(e).lower(): # –û—á–µ–Ω—å –≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    marzban_api_token_val = await get_marzban_api_token(force_refresh=True)
                    if marzban_api_token_val:
                        await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å VPN —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                        return

                await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

async def my_keys_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
                    expires_at = datetime.utcnow() + timedelta(days=FREE_TRIAL_DAYS)

                    new_db_key = VpnKey(
                        key_uuid_on_server=str(new_key_obj.key_id),
                        access_url=new_key_obj.access_url,
                        name=f"tg_user_{db_user.id}_trial_outline",
                        protocol=PROTOCOL_CALLBACK_OUTLINE,
                        user_id=db_user.id,
                        expires_at=expires_at,
                        is_active=True,
                        is_trial=True # Explicitly set trial flag
                    )
                    session.add(new_db_key)
                    await session.commit()

                    expires_str = expires_at.strftime('%d.%m.%Y –≤ %H:%M')
                    msg_text = (
                        f"‚úÖ –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á Outline VPN –≥–æ—Ç–æ–≤!\n\n"
                        f"üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:\n`{new_key_obj.access_url}`\n\n"
                        f"–û–Ω –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: *{expires_str} UTC*."
                    )
                    await context.bot.send_message(chat_id, msg_text, parse_mode='Markdown')
                except Exception as e:
                    logger.error(f"Error creating a free Outline key for user {user_tg.id}: {e}")
                    if marzban_api_token_val:
                        await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å VPN —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                        return

                await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

async def my_keys_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.
    """
    user_tg = update.effective_user
    chat_id = update.effective_chat.id
    now = datetime.utcnow()
    subscriptions_found = False

    if not marzban_client:
        await update.message.reply_text("VPN —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. (–ö–ª–∏–µ–Ω—Ç Marzban –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)")
        return

    async for session in get_async_session():
        db_user_obj = (await session.execute(select(DbUser).where(DbUser.telegram_id == user_tg.id))).scalar_one()

        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (is_active=True) –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—à–µ–π –ë–î
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ VpnKey.expires_at > now, –Ω–æ Marzban API –¥–∞—Å—Ç —Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        stmt = select(VpnKey).where(
            VpnKey.user_id == db_user_obj.id,
            VpnKey.is_active == True
        ).order_by(VpnKey.expires_at.desc()) # –°–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ

        active_subscriptions_db = (await session.execute(stmt)).scalars().all()

        if not active_subscriptions_db:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –ø–æ–¥–ø–∏—Å–æ–∫.\n–ù–∞–∂–º–∏—Ç–µ 'üîë –ü–æ–ª—É—á–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø', —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å.")
            return

        marzban_api_token_val = await get_marzban_api_token()
        if not marzban_api_token_val:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å VPN —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö. (–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ Marzban)")
            return

        for db_sub in active_subscriptions_db:
            try:
                marzban_user_info = await marzban_client.get_user(username=db_sub.marzban_username, token=marzban_api_token_val)

                if not marzban_user_info:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Marzban {db_sub.marzban_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ –¥–ª—è sub ID {db_sub.id}. –í–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª —É–¥–∞–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
                    # –ú–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å —Ç–∞–∫—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –≤ –Ω–∞—à–µ–π –ë–î
                    # db_sub.is_active = False
                    # await session.commit()
                    # await update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ (–≤–Ω—É—Ç—Ä. ID: {db_sub.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ VPN —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º –µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —Å –∏–º–µ–Ω–µ–º `{db_sub.marzban_username}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
                        f"–°—Å—ã–ª–∫–∞: `{db_sub.subscription_url}` (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π.",
                        parse_mode='Markdown'
                    )
                    continue

                subscriptions_found = True

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ
                used_traffic_gb = round(marzban_user_info.used_traffic / (1024**3), 2)
                data_limit_gb_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
                if marzban_user_info.data_limit > 0:
                    data_limit_gb_str = f"{round(marzban_user_info.data_limit / (1024**3), 2)} –ì–ë"

                # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                expires_at_dt = datetime.fromtimestamp(marzban_user_info.expire) if marzban_user_info.expire else None
                expires_str = "–ù–∏–∫–æ–≥–¥–∞"
                is_expired_on_marzban = False
                if expires_at_dt:
                    expires_str = expires_at_dt.strftime('%d.%m.%Y –≤ %H:%M UTC')
                    if expires_at_dt < now:
                        is_expired_on_marzban = True

                # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
                status_translation = {
                    "active": "–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ",
                    "disabled": "–û—Ç–∫–ª—é—á–µ–Ω–∞ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º) üö´",
                    "expired": "–ò—Å—Ç–µ–∫–ª–∞ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏) ‚è≥",
                    "limited": "–ò—Å—Ç–µ–∫–ª–∞ (–ø–æ —Ç—Ä–∞—Ñ–∏–∫—É) üìà"
                }
                marzban_status_str = status_translation.get(marzban_user_info.status, marzban_user_info.status)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π expires_at –∏ is_active, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞–∫—Ç–∏–≤–Ω–∞
                # –≠—Ç–æ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ expires_at –≤ Marzban –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                if expires_at_dt and db_sub.expires_at != expires_at_dt and marzban_user_info.status == "active":
                    db_sub.expires_at = expires_at_dt
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ID {db_sub.id} –Ω–∞ {expires_at_dt} –∏–∑ Marzban.")

                if marzban_user_info.status != "active" and db_sub.is_active:
                    db_sub.is_active = False # –ï—Å–ª–∏ –≤ Marzban –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ –∏ —É –Ω–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ ID {db_sub.id} –ø–æ–º–µ—á–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, —Ç.–∫. —Å—Ç–∞—Ç—É—Å –≤ Marzban: {marzban_user_info.status}")
                elif marzban_user_info.status == "active" and not db_sub.is_active and (not expires_at_dt or expires_at_dt > now) :
                    # –ï—Å–ª–∏ –≤ Marzban –∞–∫—Ç–∏–≤–Ω–∞, –∞ —É –Ω–∞—Å –Ω–µ—Ç (–∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞), –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                    db_sub.is_active = True
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ ID {db_sub.id} –ø–æ–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π, —Ç.–∫. —Å—Ç–∞—Ç—É—Å –≤ Marzban: {marzban_user_info.status} –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞.")

                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ Marzban –∏—Å—Ç–µ–∫–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Ç—Ä–∞—Ñ–∏–∫—É, –Ω–æ —É –Ω–∞—Å –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
                if (is_expired_on_marzban or marzban_user_info.status in ["expired", "limited"]) and db_sub.is_active:
                    db_sub.is_active = False
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ ID {db_sub.id} –ø–æ–º–µ—á–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏–∑-–∑–∞ —Å—Ç–∞—Ç—É—Å–∞/–∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ Marzban ({marzban_user_info.status}, –∏—Å—Ç–µ–∫–ª–∞: {is_expired_on_marzban}).")

                await session.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ is_active/expires_at –¥–ª—è db_sub

                # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –∏ –≤ Marzban,
                # –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–æ–º–µ—á–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–∑-–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ Marzban.
                if not db_sub.is_active and marzban_user_info.status != "active":
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ID {db_sub.id} (—Å—Ç–∞—Ç—É—Å Marzban: {marzban_user_info.status})")
                    continue


                response_text_part = (
                    f"üîó **–°—Å—ã–ª–∫–∞-–ø–æ–¥–ø–∏—Å–∫–∞:**\n`{db_sub.subscription_url}`\n\n"
                    f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Marzban): `{db_sub.marzban_username}`\n"
                    f"üìä –¢—Ä–∞—Ñ–∏–∫: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {used_traffic_gb} –ì–ë –∏–∑ {data_limit_gb_str}\n"
                    f"üóìÔ∏è –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: *{expires_str}*\n"
                    f"üö¶ –°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: *{marzban_status_str}*\n"
                    f"{'üîë (–ü—Ä–æ–±–Ω–∞—è)' if db_sub.is_trial else 'üí≥ (–ü–ª–∞—Ç–Ω–∞—è)'}"
                )

                # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ "disabled" –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                keyboard_buttons = []
                if marzban_user_info.status != "disabled":
                     keyboard_buttons.append([InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü", callback_data=f"extend_sub_{db_sub.id}")])

                reply_markup = InlineKeyboardMarkup(keyboard_buttons) if keyboard_buttons else None
                await update.message.reply_text(response_text_part, parse_mode='Markdown', reply_markup=reply_markup)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ Marzban {db_sub.marzban_username} (ID {db_sub.id}): {e}", exc_info=True)
                if "token" in str(e).lower(): # –û—á–µ–Ω—å –≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    marzban_api_token_val = await get_marzban_api_token(force_refresh=True) # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ `{db_sub.marzban_username}`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='Markdown')

        if not subscriptions_found and not active_subscriptions_db: # –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ë–î
             pass # –°–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫" —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
        elif not subscriptions_found and active_subscriptions_db: # –ï—Å–ª–∏ –±—ã–ª–∏ –≤ –ë–î, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É Marzban –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–ª–∏ –∏–ª–∏ –±—ã–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

async def extend_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ Marzban.
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ (VpnKey.id) –∏–∑ callback_data
    # pattern –≤ main() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å r"^extend_sub_(\d+)$"
    subscription_db_id_str = context.matches[0].group(1) if context.matches and context.matches[0].groups() else None
    if not subscription_db_id_str:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
        logger.error("extend_callback_handler: subscription_db_id not found in callback_data.")
        return

    subscription_db_id = int(subscription_db_id_str)
    user_tg_id = query.from_user.id

    async for session in get_async_session():
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –Ω–∞—à–µ–π –ë–î
        db_subscription = await session.get(VpnKey, subscription_db_id)

        if not db_subscription:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.error(f"extend_callback_handler: VpnKey with id {subscription_db_id} not found.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # db_subscription.user —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ç.–∫. VpnKey.user —ç—Ç–æ relationship
        # –ù—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ db_subscription.user.telegram_id —ç—Ç–æ —Ç–æ, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º
        # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ join –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ db_subscription –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ.
        # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ, –µ—Å–ª–∏ user_id –≤ VpnKey —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç DbUser.id, –∞ –Ω–µ telegram_id.
        # –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: VpnKey.user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
        # User.telegram_id = Column(Integer, unique=True, index=True, nullable=False)
        # –ó–Ω–∞—á–∏—Ç, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å DbUser.id –ø–æ telegram_id

        db_user_obj = (await session.execute(select(DbUser).where(DbUser.telegram_id == user_tg_id))).scalar_one()
        if not db_user_obj or db_subscription.user_id != db_user_obj.id:
            await query.message.reply_text("–û—à–∏–±–∫–∞: —ç—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            logger.warning(f"User {user_tg_id} tried to extend subscription {subscription_db_id} not belonging to them (owner user_id: {db_subscription.user_id}, this user_id: {db_user_obj.id if db_user_obj else 'None'}).")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Marzban –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
        marzban_api_token_val = await get_marzban_api_token()
        if not marzban_api_token_val:
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å VPN —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. (–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ Marzban)")
            return

        try:
            marzban_user_info = await marzban_client.get_user(username=db_subscription.marzban_username, token=marzban_api_token_val)
            if not marzban_user_info:
                await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É ({db_subscription.marzban_username}) –Ω–∞ VPN —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return
            if marzban_user_info.status == "disabled":
                await query.message.reply_text(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ({db_subscription.marzban_username}) –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Marzban –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_subscription.marzban_username} –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂, –ø–µ—Ä–µ–¥–∞–≤–∞—è marzban_username –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        await initiate_yookassa_payment(
            update,
            context,
            months=1,
            duration_days=30, # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            marzban_username_to_extend=db_subscription.marzban_username,
            subscription_db_id_to_extend=db_subscription.id # –ü–µ—Ä–µ–¥–∞–µ–º ID –∏–∑ –Ω–∞—à–µ–π –ë–î –¥–ª—è —Å–≤—è–∑–∏ –ø–ª–∞—Ç–µ–∂–∞
        )


async def initiate_yookassa_payment(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    months: int,
    duration_days: int,
    marzban_username_to_extend: str | None = None, # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    subscription_db_id_to_extend: int | None = None # ID VpnKey –∏–∑ –Ω–∞—à–µ–π –ë–î –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    ):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ Marzban –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.
    """
    user_tg = update.effective_user
    chat_id = None
    if update.callback_query and update.callback_query.message: # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback_handler (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–æ–¥–ª–∏—Ç—å")
        chat_id = update.callback_query.message.chat_id
    elif update.message: # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ message_handler (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç—Ä–∏–∞–ª)
        chat_id = update.message.chat_id
    
    if not chat_id and user_tg:
         chat_id = user_tg.id
         logger.warning(f"initiate_yookassa_payment: chat_id –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ user_tg.id ({user_tg.id}).")

    if not chat_id:
        logger.error("initiate_yookassa_payment: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id.")
        return

    if not (YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY):
        await context.bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    payment_amount = BASE_PRICE_PER_MONTH * months
    
    async for session in get_async_session():
        db_user_obj = (await session.execute(select(DbUser).where(DbUser.telegram_id == user_tg.id))).scalar_one()
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è YooKassa
        yookassa_metadata = {
            "internal_user_db_id": str(db_user_obj.id), # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã users
            "telegram_user_id": str(user_tg.id),
            "duration_days": str(duration_days),
            # "chosen_protocol" –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        }
        
        description_service_part = "VPN –ø–æ–¥–ø–∏—Å–∫–∏ (Marzban)"

        if marzban_username_to_extend and subscription_db_id_to_extend:
            yookassa_metadata["action"] = "extend"
            yookassa_metadata["marzban_username"] = marzban_username_to_extend
            yookassa_metadata["subscription_db_id"] = subscription_db_id_to_extend # ID VpnKey –∏–∑ –Ω–∞—à–µ–π –ë–î
            description = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ {description_service_part} ({marzban_username_to_extend}) –Ω–∞ {months} –º–µ—Å."
        else:
            # –≠—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—Ä–∏–∞–ª –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
            yookassa_metadata["action"] = "create"
            # marzban_username –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≤–µ–±—Ö—É–∫–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            description = f"–ù–æ–≤–∞—è {description_service_part} –Ω–∞ {months} –º–µ—Å."
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ù–ï –¢–†–ò–ê–õ–¨–ù–û–ô –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é –ø–ª–∞—Ç–Ω—É—é
            # –≠—Ç–æ –±–æ–ª—å—à–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç.–∫. –≤–µ–±—Ö—É–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–º –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            active_paid_sub_stmt = select(VpnKey).where(
                VpnKey.user_id == db_user_obj.id,
                VpnKey.is_trial == False,
                VpnKey.is_active == True,
                VpnKey.expires_at > datetime.utcnow()
            )
            existing_active_paid_sub = (await session.execute(active_paid_sub_stmt)).scalars().first()
            if existing_active_paid_sub:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, —É–∂–µ –∏–º–µ—è –∞–∫—Ç–∏–≤–Ω—É—é –ø–ª–∞—Ç–Ω—É—é {existing_active_paid_sub.marzban_username}.")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –ª–æ–≥–∏–∫—É: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π.
                # –ü–æ–∫–∞ —á—Ç–æ, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É. –í–µ–±—Ö—É–∫ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è.
                # –ò–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –æ–¥–Ω–∞.
                # description = f"–ù–æ–≤–∞—è/–ü—Ä–æ–¥–ª–µ–Ω–∏–µ {description_service_part} –Ω–∞ {months} –º–µ—Å." # –ë–æ–ª–µ–µ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
                # yookassa_metadata["action"] = "create_or_extend" # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –≤–µ–±—Ö—É–∫–µ
                pass


        receipt_items = [
            ReceiptItem({
                "description": description,
                "quantity": 1.0,
                "amount": {"value": str(payment_amount), "currency": "RUB"},
                "vat_code": 1
            })
        ]

        receipt = Receipt()
        receipt.customer = {"email": f"user_{user_tg.id}@telegram.bot"} # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ email –Ω–µ—Ç
        receipt.items = receipt_items

        builder = PaymentRequestBuilder()
        builder.set_amount({"value": str(payment_amount), "currency": "RUB"}) \
            .set_capture(True) \
            .set_confirmation({"type": "redirect", "return_url": f"https://t.me/{context.bot.username}"}) \
            .set_description(description) \
            .set_metadata(yookassa_metadata) \
            .set_receipt(receipt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º idempotency_key –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–∏ —Å–±–æ—è—Ö
        idempotency_key_payload = f"{db_user_obj.id}_{yookassa_metadata['action']}_{marzban_username_to_extend or 'new'}_{months}_{duration_days}"
        idempotency_key = str(uuid.uuid5(uuid.NAMESPACE_DNS, idempotency_key_payload)) # –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        try:
            payment_request = builder.build()
            # YooKassaPaymentObject.create - –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º to_thread
            yookassa_payment_obj = await asyncio.to_thread(
                YooKassaPaymentObject.create, payment_request, idempotency_key
            )

            if yookassa_payment_obj and yookassa_payment_obj.confirmation:
                new_db_payment = Payment(
                    yookassa_payment_id=yookassa_payment_obj.id,
                    user_id=db_user_obj.id,
                    amount=payment_amount,
                    currency="RUB", # –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ yookassa_payment_obj.amount.currency
                    status=yookassa_payment_obj.status,
                    description=description,
                    additional_data=json.dumps(yookassa_metadata)
                )
                session.add(new_db_payment)
                await session.commit()
                await context.bot.send_message(chat_id, f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{yookassa_payment_obj.confirmation.confirmation_url}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ YooKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg.id}. –û—Ç–≤–µ—Ç: {yookassa_payment_obj}")
                await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ YooKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg.id}: {e}", exc_info=True)
            await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ YooKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg.id}: {e}", exc_info=True)
            await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß ---
async def check_and_deactivate_expired_keys():
    logger.info("APScheduler: Checking expired Marzban subscriptions...")

    if not marzban_client:
        logger.error("APScheduler: Marzban client not initialized. Skipping check.")
        return

    marzban_api_token_val = await get_marzban_api_token()
    if not marzban_api_token_val:
        logger.error("APScheduler: Failed to get Marzban API token. Skipping check.")
        return

    async for session in get_async_session():
        keys_modified_count = 0
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã –≤ –Ω–∞—à–µ–π –ë–î –∏ —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–æ—à–ª–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            stmt = select(VpnKey).where(
                VpnKey.is_active == True,
                VpnKey.expires_at <= datetime.utcnow()
            )
            expired_db_subscriptions = (await session.execute(stmt)).scalars().all()

            if not expired_db_subscriptions:
                logger.info("APScheduler: No subscriptions found in DB that are marked active and past expiration time.")
                return

            logger.info(f"APScheduler: Found {len(expired_db_subscriptions)} potentially expired subscriptions in DB to check/deactivate.")

            for db_sub in expired_db_subscriptions:
                logger.info(f"APScheduler: Processing DB subscription ID {db_sub.id} (Marzban User: {db_sub.marzban_username}) for user_id {db_sub.user_id}.")
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –≤ Marzban, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
                    marzban_user_info = await marzban_client.get_user(username=db_sub.marzban_username, token=marzban_api_token_val)

                    needs_deactivation_in_marzban = True
                    if marzban_user_info:
                        if marzban_user_info.status == "active":
                            marzban_expires_dt = datetime.fromtimestamp(marzban_user_info.expire) if marzban_user_info.expire else None
                            if marzban_expires_dt and marzban_expires_dt > datetime.utcnow():
                                # –ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –≤ Marzban, –æ–±–Ω–æ–≤–∏–º –Ω–∞—à—É –ë–î
                                logger.info(f"Subscription {db_sub.marzban_username} (DB ID: {db_sub.id}) was extended in Marzban to {marzban_expires_dt}. Updating local DB.")
                                db_sub.expires_at = marzban_expires_dt
                                db_sub.is_active = True # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
                                # –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏ data_limit, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                                await session.commit()
                                keys_modified_count +=1
                                needs_deactivation_in_marzban = False # –ù–µ —É–¥–∞–ª—è–µ–º –∏–∑ Marzban –∏ –Ω–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (—É–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏)
                            # –ï—Å–ª–∏ –∂–µ marzban_expires_dt –≤—Å–µ –µ—â–µ <= now, —Ç–æ —É–¥–∞–ª—è–µ–º
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ Marzban, –∑–Ω–∞—á–∏—Ç –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É –Ω–∞—Å
                        logger.info(f"User {db_sub.marzban_username} (DB ID: {db_sub.id}) not found in Marzban. Deactivating locally.")
                        needs_deactivation_in_marzban = False
                        # –£–¥–∞–ª—è—Ç—å –∏–∑ Marzban –Ω–µ—á–µ–≥–æ, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥–æ

                    if needs_deactivation_in_marzban:
                        logger.info(f"Attempting to delete user {db_sub.marzban_username} from Marzban panel.")
                        await marzban_client.delete_user(username=db_sub.marzban_username, token=marzban_api_token_val)
                        logger.info(f"Successfully deleted user {db_sub.marzban_username} from Marzban (or user already deleted).")

                    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ (—É–¥–∞–ª–µ–Ω –∏–∑ Marzban –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–∞–º), –µ—Å–ª–∏ needs_deactivation_in_marzban –±—ã–ª true (–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)
                    # –∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç.–µ. –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–µ–∫), –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ.
                    # –ï—Å–ª–∏ needs_deactivation_in_marzban=false –ò –æ–Ω –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω (—Ç.–µ. –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Marzban), —Ç–æ–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ.
                    if needs_deactivation_in_marzban or (not marzban_user_info and not needs_deactivation_in_marzban):
                        db_sub.is_active = False
                        logger.info(f"Deactivated subscription ID {db_sub.id} (Marzban User: {db_sub.marzban_username}) in local DB.")
                        keys_modified_count +=1

                except Exception as e:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "User not found" –æ—Ç marzpy, —Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ.
                    # –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∏–¥–∞–µ—Ç marzpy –¥–ª—è "user not found"
                    # –ù–∞–ø—Ä–∏–º–µ—Ä, if isinstance(e, MarzbanUserNotFoundError): ...
                    err_msg = str(e).lower()
                    if "user not found" in err_msg or "not found" in err_msg: # –ì—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                        logger.warning(f"User {db_sub.marzban_username} not found in Marzban during deactivation (Error: {e}). Deactivating locally.")
                        db_sub.is_active = False
                        keys_modified_count +=1
                    elif "token" in err_msg:
                         logger.error(f"Marzban API token error during deactivation of {db_sub.marzban_username}: {e}. Attempting to refresh token for next run.")
                         await get_marzban_api_token(force_refresh=True) # –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
                    else:
                        logger.error(f"Error processing expired Marzban subscription for {db_sub.marzban_username} (DB ID: {db_sub.id}): {e}", exc_info=True)
                        # –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –µ—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API Marzban
                        # –∫—Ä–æ–º–µ –æ—à–∏–±–∫–∏ —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å

            if keys_modified_count > 0:
                await session.commit()
                logger.info(f"APScheduler: Committed changes for {keys_modified_count} subscriptions.")
            else:
                logger.info("APScheduler: No subscriptions required database changes in this run.")

        except Exception as e:
            logger.error(f"APScheduler error in check_and_deactivate_expired_keys: {e}", exc_info=True)
            await session.rollback()

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main() -> None:
    if not BOT_TOKEN:
        logger.critical("BOT_TOKEN not found!")
        return

    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Marzban –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    async def post_init(app: Application):
        await initialize_marzban_client() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Marzban
        # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ë–î (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        await create_db_tables()

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler = AsyncIOScheduler(timezone="UTC") # –ü–µ—Ä–µ–Ω–µ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—é–¥–∞, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ async context
        scheduler.add_job(check_and_deactivate_expired_keys, 'interval', hours=1) # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–∞—â–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 10-15 –º–∏–Ω—É—Ç
        scheduler.start()
        app.job_queue = scheduler # –°–æ—Ö—Ä–∞–Ω—è–µ–º scheduler –≤ application context –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–º —É–ø—Ä–∞–≤–ª—è—Ç—å
        logger.info("APScheduler started.")

    application.post_init = post_init
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{BUTTON_GET_KEY}$"), get_key_handler))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{BUTTON_MY_KEYS}$"), my_keys_handler))
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π pattern –¥–ª—è extend_callback_handler
    application.add_handler(CallbackQueryHandler(extend_callback_handler, pattern=r"^extend_sub_(\d+)$"))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    # application.add_handler(CallbackQueryHandler(handle_protocol_selection, pattern=f"^({PROTOCOL_CALLBACK_OUTLINE}|{PROTOCOL_CALLBACK_AMNEZIA})$"))

    async def on_shutdown(app: Application):
        logger.info("Bot is shutting down...")
        if app.job_queue and app.job_queue.running: # type: ignore
            app.job_queue.shutdown() # type: ignore
            logger.info("APScheduler stopped.")
        if marzban_client: # –•–æ—Ç—è —É marzpy –Ω–µ—Ç —è–≤–Ω–æ–≥–æ close() –∏–ª–∏ dispose() –º–µ—Ç–æ–¥–∞ –≤ README
            logger.info("Marzban client does not have an explicit close method in marzpy.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å await async_engine.dispose(), –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ –ª–µ–≥–∫–æ —Å–¥–µ–ª–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å PTB < v20
        # –î–ª—è PTB v20+ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ application.shutdown()

    application.post_shutdown = on_shutdown

    logger.info("Bot starting...")
    application.run_polling()
    # –ö–æ–¥ –ø–æ—Å–ª–µ run_polling() –¥–ª—è PTB < v20 –æ–±—ã—á–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —à—Ç–∞—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã,
    # –ø–æ—ç—Ç–æ–º—É –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª—É—á—à–µ –ø–æ–º–µ—â–∞—Ç—å –≤ post_shutdown –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–∏–∫–ª–æ–º asyncio —Å–∞–º–æ–º—É (–¥–ª—è v20+)
    # if scheduler.running: # –≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è
    #     scheduler.shutdown()
    #     logger.info("APScheduler stopped.")

if __name__ == "__main__":
    main()
